@page "/coordinator/trainee"
@layout CoordinatorLayout
@attribute [Authorize(Roles = "coordinator")]
@inject NavigationManager NavManager
@inject IOrganizationService OrganizationService
@inject ISupervisorService SupervisorService
@inject ITraineeService TraineeService
@inject IUserService UserService
@inject IToastService Toast
@inject ISearchService SearchService
@inject IJSRuntime JsRun
<!-- HEADER STARTS HERE -->
<div class="main_content">
    <div class="header">
        <div class="fas fa-bars d-block d-md-none" id="menu-btn"></div>
        <div><i class="fas fa-solid fa-id-badge"></i>Trainees</div>
        <a href="/coordinator/profile"><i class="fas fa-solid fa-user" id="profile"></i></a>
    </div>
    <!-- HEADER ENDS HERE -->
    <!-- TRAINEE PAGE CONTENT STARTS HERE -->
    <!-- TRAINEE PAGE SECTION 1 STARTS HERE -->
    <section class="admindb-s1">
        <div class="search-container">
            <EditForm Model="search" OnValidSubmit="OnSubmitSearch">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <input type="text" @bind-value="search.SearchString" placeholder="Search by Last Name" name="search">
                <ValidationMessage For="() => search.SearchString" />
                <button type="submit" class="search-button">Search</button>
            </EditForm>
            <button type="button" class="add-student-button" @onclick="OnAddClick">
                + Add New
                Trainee
            </button>
        </div>
    </section>
    <!-- TRAINEE PAGE SECTION 1 ENDS HERE -->
    <!-- TRAINEE PAGE SECTION 2 STARTS HERE -->
    <section class="studentable-s2">
        <table class="styled-table">
            <thead>
                <tr>
                    <th>School Year</th>
                    <th>Student</th>
                    <th>Supervisor</th>
                    <th>Organization</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (trainee, i) in Trainees.Select((trainee, i) => (trainee, i)))
                {
                    <tr>
                        <td>@trainee.school_year</td>
                        <td>@trainee.StudentName</td>
                        <td>@trainee.SupervisorName</td>
                        <td>@trainee.OrganizationName</td>
                        <td>
                            <button type="button" class="edit-del-student-button"
                                    @onclick="() => OnEditClick(trainee.Id)">
                                Edit
                            </button>
                            <button type="button" class="edit-del-student-button"
                                    @onclick="() => OnDeleteClick(trainee)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
                <!-- and so on... -->
            </tbody>
        </table>
    </section>
    <!-- TRAINEE PAGE SECTION 2 ENDS HERE -->
    <!-- TRAINEE PAGE CONTENT ENDS HERE -->
    <!-- STUDENT PAGE CONTENT ENDS HERE -->
</div>

@code {
    List<Trainee> Trainees = new List<Trainee>();
    Search search = new Search();

    User student = new User();

    private async Task GetStudent(int studentId)
    {
        student = await UserService.GetUser(studentId);
    }

    private async Task OnSubmitSearch()
    {
        Trainees = await SearchService.SearchTrainee(search);
        await JsRun.InvokeVoidAsync("console.log", Trainees);
        foreach (var trainee in Trainees)
        {
            var user = await UserService.GetUser(trainee.studentId);
            var supervisor = await SupervisorService.GetSupervisor(trainee.supervisorId);
            var org = await OrganizationService.GetOrganization(trainee.organizationId);
            trainee.StudentName = $"{user.first_name} {user.last_name}";
            trainee.SupervisorName = $"{supervisor.first_name} {supervisor.last_name}";
            trainee.OrganizationName = org.org_name;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Trainees = await TraineeService.GetAllTrainee();
        foreach (var trainee in Trainees)
        {
            var user = await UserService.GetUser(trainee.studentId);
            var supervisor = await SupervisorService.GetSupervisor(trainee.supervisorId);
            var org = await OrganizationService.GetOrganization(trainee.organizationId);
            trainee.StudentName = $"{user.first_name} {user.last_name}";
            trainee.SupervisorName = $"{supervisor.first_name} {supervisor.last_name}";
            trainee.OrganizationName = org.org_name;
        }
    }

    private void OnAddClick()
    {
        NavManager.NavigateTo("coordinator/trainee/form");
    }

    private void OnEditClick(int traineeId)
    {
        NavManager.NavigateTo($"coordinator/trainee/form/{traineeId}");
    }

    private async Task OnDeleteClick(Trainee trainee)
    {
        var result = await TraineeService.DeleteTrainee(trainee);
        Toast.ShowSuccess("Trainee Successfully Deleted", "Deleted");
        Trainees = result;
    }
}
