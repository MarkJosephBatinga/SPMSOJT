@page "/coordinator/student/form"
@page "/coordinator/student/form/{Id:int}"
@layout CoordinatorLayout
@attribute [Authorize(Roles = "coordinator")]
@inject IUserService UserService
@inject IToastService Toast
@inject NavigationManager NavManager
@inject IJSRuntime JsRun
<!-- HEADER STARTS HERE -->
<div class="main_content">
    <div class="header">
        <div class="fas fa-bars d-block d-md-none" id="menu-btn"></div>
        <div><i class="fas fa-solid fa-users"></i>Add Students</div>
        <a href="/coordinator/profile"><i class="fas fa-solid fa-user" id="profile"></i></a>
    </div>
    <!-- HEADER ENDS HERE -->
    <div class="content">
        <EditForm Model="user" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <h3>Personal Information</h3>
            <hr>
            <div class="row">
                <div class="col">
                    <label for="lastname">Last Name</label>
                    <ValidationMessage For="() => user.last_name" />
                    <input type="text" id="lastname" @bind-value="user.last_name" placeholder="Last name">
                </div>
                <div class="col">
                    <label for="firstname">First Name</label>
                    <ValidationMessage For="() => user.last_name" />
                    <input type="text" id="firstname" @bind-value="user.first_name" placeholder="First name">
                </div>
                <div class="col">
                    <label for="middlename">Middle Name</label>
                    <ValidationMessage For="() => user.middle_name" />
                    <input type="text" id="middlename" @bind-value="user.middle_name" placeholder="Middle name">
                </div>
                <div class="col">
                    <label for="suffix">Suffix</label>
                    <input type="text" id="suffix" @bind-value="user.suffix" placeholder="Suffix">
                </div>
            </div>

            <label for="address">Address</label>
            <div class="row">
                <div class="col">
                    <ValidationMessage For="() => user.barangay" />
                    <input type="text" id="barangay" @bind-value="user.barangay" placeholder="Barangay">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.city" />
                    <input type="text" id="city" @bind-value="user.city" placeholder="Town/City">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.province" />
                    <input type="text" id="province" @bind-value="user.province" placeholder="Province">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.zipcode" />
                    <input type="text" id="zipcode" @bind-value="user.zipcode" placeholder="Zip code">
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <label for="email">Email Address</label>
                    <ValidationMessage For="() => user.email" />
                    <input type="text" id="email" @bind-value="user.email" placeholder="Email Address">
                </div>
                <div class="col">
                    <label for="address">Contact number</label>
                    <ValidationMessage For="() => user.phonenum" />
                    <input type="text" id="contno" @bind-value="user.phonenum" placeholder="Contact number">
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <label for="citizen">Citizenship</label>
                    <ValidationMessage For="() => user.citizenship" />
                    <input type="text" id="citizen" @bind-value="user.citizenship" placeholder="Citizenship">
                </div>
                <div class="col">
                    <label for="gender">Sex</label>
                    <ValidationMessage For="() => user.sex" />
                    <select id="gender" name="gender" @onchange="OnGenderChange">
                        <option selected hidden="" value="Sex">Sex</option>
                        <option name="gender" value="female">Female</option>
                        <option name="gender" value="male">Male</option>
                    </select>
                </div>
            </div>

            <h3>School Information</h3>
            <hr>
            <div class="row">
                <div class="col">
                    <label for="schoolemail">School issued E-mail</label>
                    <ValidationMessage For="() => user.schoolemail" />
                    <input type="text" id="schoolemail" @bind-value="user.schoolemail" placeholder="School E-mail">
                </div>
                <div class="col">
                    <label for="college">Id Number</label>
                    <ValidationMessage For="() => user.idnumber" />
                    <input type="text" id="idnumber" @bind-value="user.idnumber" placeholder="School">
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <label for="college">College/Institute</label>
                    <ValidationMessage For="() => user.college" />
                    <input type="text" id="college" @bind-value="user.college" placeholder="School">
                </div>
                <div class="col">
                    <label for="school">School</label>
                    <ValidationMessage For="() => user.schoolname" />
                    <input type="text" id="school" @bind-value="user.schoolname" placeholder="School">
                </div>
            </div>

            <label for="schooladd">School Address</label>
            <div class="row">
                <div class="col">
                    <ValidationMessage For="() => user.school_barangay" />
                    <input type="text" id="scbarangay" @bind-value="user.school_barangay" placeholder="Barangay">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.school_city" />
                    <input type="text" id="sccity" @bind-value="user.school_city" placeholder="Town/City">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.school_province" />
                    <input type="text" id="scprovince" @bind-value="user.school_province" placeholder="Province">
                </div>
                <div class="col">
                    <ValidationMessage For="() => user.school_zipcode" />
                    <input type="text" id="sczipcode" @bind-value="user.school_zipcode" placeholder="Zip code">
                </div>
            </div>

            <h3>Login Information</h3>
            <hr>
            <div class="row">
                <div class="col">
                    <label for="login">Email</label>
                    <ValidationMessage For="() => user.email" />
                    <input type="text" id="login" @bind-value="user.email" placeholder="Email">
                </div>
                <div class="col">
                    <label for="password">Password</label>
                    <ValidationMessage For="() => user.password" />
                    <input type="password" id="password" @bind-value="user.password" placeholder="Password">
                </div>
            </div>

            <div class="row mt-5">
                <div class="forbutton">
                    <button type="submit">SUBMIT</button>
                    <a href="/coordinator/student" class="cancel-btn">CANCEL</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }

    User user = new User();

    protected async override Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            user = await UserService.GetUser(Id.Value);
        }
    }

    private async Task OnSubmit()
    {
        if (user.Id == 0)
        {
            var result = await UserService.AddUser(user);
            if (result != null)
            {
                Toast.ShowSuccess("New Student Added", "Success");
                NavManager.NavigateTo("coordinator/student");
            }
        }
        else
        {
            var result = await UserService.UpdateUser(user);
            if (result != null)
            {
                Toast.ShowSuccess("Student Successfully Updated", "Success");
                NavManager.NavigateTo("coordinator/student");
            }
        }
    }

    private void OnGenderChange(ChangeEventArgs e)
    {
        var gender = e.Value.ToString();
        if (gender != "Sex")
        {
            user.sex = gender;
        }
    }
}
