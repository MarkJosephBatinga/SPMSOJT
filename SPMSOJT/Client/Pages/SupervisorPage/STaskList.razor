@page "/supervisor/taskrecord"
@layout SupervisorLayout
@attribute [Authorize(Roles = "supervisor")]
@inject ICompiledTaskService CompiledTaskService
@inject ITaskService TaskService
@inject ILocalStorageService LocalStorage
@inject ILoginService LoginService 
@inject IUserService UserService 
@inject IToastService Toast
@inject NavigationManager NavManager

<!-- HEADER STARTS HERE -->
<div class="main_content">
    <div class="header">
        <div class="fas fa-bars d-block d-md-none" id="menu-btn"></div>
        <div><i class="fas fa-solid fa-list-check"></i>Task Record</div>
        <a href="/supervisor/profile"><i class="fas fa-solid fa-user" id="profile"></i></a>
    </div>
    <!-- HEADER ENDS HERE -->
    <!-- TASK RECORD PAGE CONTENT STARTS HERE -->
    <!-- TASK PAGE SECTION 1 STARTS HERE -->
    <section class="admindb-s1">
        <div class="search-container">
            <form action="#">
                <input type="text" placeholder="Search task" name="search">
                <button type="submit" class="search-button">Search</button>
            </form>
        </div>
    </section>
    <!-- TASK PAGE SECTION 1 ENDS HERE -->
    <!-- TASK PAGE SECTION 2 STARTS HERE -->
    <section class="studentable-s2">
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Task Code</th>
                    <th>Student Name</th>
                    <th>Uploaded File</th>
                    <th>Date of Submission</th>
                    <th>Remarks</th>
                    <th>Score</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in CompiledTasks)
                {
                    <tr>
                        <td>@task.TaskCode</td>
                        <td>@task.StudentName</td>
                        <td>
                            <a @onclick="() => OnPdfClick(task.Id)">
                                @task.StudentFileName
                            </a>
                        </td>
                        <td>@task.SubmissionDate.ToLongDateString()</td>
                        <td>@(task.Remarks == null ? "Done": task.Remarks)</td>
                        <td>@(task.Score == 0 ? "No Scores Yet": task.Score)</td>
                        <td>
                            <button type="button" class="edit-del-student-button"
                                    @onclick="() => OnEditClick(task.Id)">
                                Edit
                            </button>
                            <button type="button" class="edit-del-student-button"
                                   @onclick="() => OnDeleteClick(task)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
                <!-- and so on... -->
            </tbody>
        </table>
    </section>
    <!-- TASK PAGE SECTION 2 ENDS HERE -->
    <!-- TASK RECORD PAGE CONTENT ENDS HERE -->
</div>

@code {
    List<CompiledTask> CompiledTasks = new List<CompiledTask>();
    Supervisor supervisor = new Supervisor();

    protected async override Task OnInitializedAsync()
    {
        var username = await LocalStorage.GetItemAsStringAsync("username");
        supervisor = await LoginService.GetSupervisor(username);
        CompiledTasks = await CompiledTaskService.GetAllCompiledTaskPerSupervisor(supervisor.Id);
        foreach (var compiledTask in CompiledTasks)
        {
            var task = await TaskService.GetTasks(compiledTask.TaskId);
            var user = await UserService.GetUser(compiledTask.StudentId);
            compiledTask.StudentName = $"{user.first_name} {user.last_name}";
            compiledTask.TaskCode = task.TaskCode;
        }
    }

    private void OnEditClick(int Id)
    {
        NavManager.NavigateTo($"/supervisor/task/formrecord/{Id}");
    }

    private void OnPdfClick(int Id)
    {
        NavManager.NavigateTo($"/supervisor/pdfviewer/{Id}");
    }

    private async Task OnDeleteClick(CompiledTask task)
    {
        var result = await CompiledTaskService.DeleteCompiledTask(task);
        Toast.ShowSuccess("Submitted Task Successfully Deleted", "Deleted");
        CompiledTasks = await CompiledTaskService.GetAllCompiledTaskPerSupervisor(supervisor.Id);
        foreach (var compiledTask in CompiledTasks)
        {
            var dbtask = await TaskService.GetTasks(compiledTask.TaskId);
            var user = await UserService.GetUser(compiledTask.StudentId);
            compiledTask.StudentName = $"{user.first_name} {user.last_name}";
            compiledTask.TaskCode = dbtask.TaskCode;
        }
    }
}
